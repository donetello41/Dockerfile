def zipname = 'UNKNOWN'
def IMAGE = 'UNKNOWN'

pipeline
{
    options
    {
        buildDiscarder(logRotator(numToKeepStr: '3')) //Sadece bu sayıdaki build log'ları tutulacaktır.
    }
    agent any //herhangibir agent'ta derleyebilirsin
    environment //environment variable tanımlanıyor
    {
        VERSION = 'latest'
        PROJECT = 'pim_api'
        IMAGE = 'image'
        ECRURL = '842810336739.dkr.ecr.eu-west-1.amazonaws.com/talhadeneme'
        REGION = 'eu-west-1'
        ENVIRONMENT_NAME = 'static-web-elbtype-app'
        APP_NAME = 'StaticWeb'
        AWS_ACCOUNT_ID = '842810336739'
        EB_BUCKET = "elasticbeanstalk-eu-west-1-842810336739"
        
    }
    stages
    {
        stage('Build preparations')
        {
            steps
            {
                script 
                {
                    // calculate GIT lastest commit short-hash
                    gitCommitHash = sh(returnStdout: true, script: 'git rev-parse HEAD').trim() // returnStdout shell komutunun çıktısını değişkene atama yapıyor. trim() metodu içine yazılan karakterleri atar burda baştaki ve sondaki boşlukları atmak için kullanılmış. "git rev-parse HEAD" komutu commit'in SHA1 kodunu döndürür 
                    shortCommitHash = gitCommitHash.take(7) //take() metodu içine yazılan sayı kadar string'ten karakter alır.
                    // calculate a sample version tag
                    VERSION = shortCommitHash//versiyon olarak shortCommitHash atanıyor
                    // set the build display name
                    currentBuild.displayName = "#${BUILD_ID}-${VERSION}"//çalışan build'in(currentBuild) displayName'ine BUILD_ID-VERSION ataması yapıyor
                    IMAGE = "${PROJECT}-${VERSION}"
                }
            }
        }
        stage('Docker build')
        {
            steps
            {
                script
                {
                    // Build the docker image using a Dockerfile
                    //docker.build("$IMAGE","dockerfile/Path")
                    docker.build("$ECRURL:$IMAGE")
                }
            }
        }
        stage('Docker push')
        {
            steps
            {
                script
                {
                    // login to ECR - for now it seems that that the ECR Jenkins plugin is not performing the login as expected. I hope it will in the future.
                    //sh("eval \$(aws ecr get-login --no-include-email | sed 's|https://||')")
                    // Push the Docker image to ECR
                    //docker.withRegistry(ECRURL, ECRCRED)
                    //docker.withRegistery(ECRURL, ECRCRED)
                    //{
                        docker.image("$ECRURL:${IMAGE}").push()
                    //}
                }
            }
        }

        stage('Create AWSEB Zip')
        {
            steps
            {
                script
                {
                    IMAGE = "${PROJECT}-${VERSION}"

                    echo "====++++create Dockerrun.aws.json++++===="

                    echo "====++++$aws_account_id:$AWS_ACCOUNT_ID++++===="
                    // Replace the <AWS_ACCOUNT_ID> with the real ID
                    sh 'sed -i "s/<AWS_ACCOUNT_ID>/$AWS_ACCOUNT_ID/" Dockerrun.aws.json'
                    // Replace the <NAME> with the real name,
                    sh 'cat Dockerrun.aws.json'
                    echo "====++++project:$PROJECT++++===="
                    sh 'sed -i "s/<PROJECTNAME>/$PROJECT/" Dockerrun.aws.json'
                    //# Replace the <TAG> with the real version number
                    sh 'cat Dockerrun.aws.json'
                    echo "====++++version:$VERSION++++===="
                    sh 'sed -i "s/<TAG>/$VERSION/" Dockerrun.aws.json'
                    sh 'cat Dockerrun.aws.json'
                    echo "====++++image:$IMAGE++++===="


                    sh "echo $IMAGE $PROJECT $VERSION"

                    sh 'zip "${IMAGE}.zip" Dockerrun.aws.json'

                    sh 'ls -la'

                    echo "====++++Deployment zip to S3++++===="
                    
                    sh """aws s3 cp $IMAGE.zip s3://$EB_BUCKET/pimapi/$IMAGE.zip"""

                    echo "====++++$IMAGE++++===="




                    echo "====++++yeni app versiyon oluşturma++++===="
                    // Create a new application version with the zipped up Dockerrun file
                    sh 'aws elasticbeanstalk create-application-version --application-name $NAME-application \
                        --version-label $VERSION --source-bundle S3Bucket=$EB_BUCKET,S3Key="$IMAGE.zip"'
                    
                    echo "====++++yeni app versiyon ile environment güncelleme++++===="
                    // Update the environment to use the new application version
                    sh 'aws elasticbeanstalk update-environment --environment-name $ENVIRONMENT_NAME \
                        --version-label $VERSION'
                }
            }
        }/*
        post
        {
            always
            {
                // make sure that the Docker image is removed
                sh "docker rmi $ECRURL:$IMAGE | true"
            }
        }
        */
    }
    
} 