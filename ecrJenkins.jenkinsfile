pipeline
{
    options
    {
        buildDiscarder(logRotator(numToKeepStr: '3')) //Sadece bu sayıdaki build log'ları tutulacaktır.
    }
    agent any //herhangibir agent'ta derleyebilirsin
    environment //environment variable tanımlanıyor
    {
        VERSION = 'latest'
        PROJECT = 'pim_api'
        IMAGE = 'pim_api:latest'
        ECRURL = '842810336739.dkr.ecr.eu-west-1.amazonaws.com/talhadeneme'
        ECRCRED = 'ecr:eu-central-1:tap_ecr'
    }
    stages
    {
        stage('Build preparations')
        {
            steps
            {
                script 
                {
                    // calculate GIT lastest commit short-hash
                    gitCommitHash = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()// returnStdout shell komutunun çıktısını değişkene atama yapıyor. trim() metodu içine yazılan karakterleri atar burda baştaki ve sondaki boşlukları atmak için kullanılmış. "git rev-parse HEAD" komutu commit'in SHA1 kodunu döndürür 
                    shortCommitHash = gitCommitHash.take(7) //take() metodu içine yazılan sayı kadar string'ten karakter alır.
                    // calculate a sample version tag
                    VERSION = shortCommitHash//versiyon olarak shortCommitHash atanıyor
                    // set the build display name
                    currentBuild.displayName = "#${BUILD_ID}-${VERSION}"//çalışan build'in(currentBuild) displayName'ine BUILD_ID-VERSION ataması yapıyor
                    IMAGE = "$PROJECT:$VERSION"
                }
            }
        }
        stage('Docker build')
        {
            steps
            {
                script
                {
                    // Build the docker image using a Dockerfile
                    docker.build("$IMAGE","dockerfile/Path")
                }
            }
        }
        stage('Docker push')
        {
            steps
            {
                script
                {
                    // login to ECR - for now it seems that that the ECR Jenkins plugin is not performing the login as expected. I hope it will in the future.
                    //sh("eval \$(aws ecr get-login --no-include-email | sed 's|https://||')")
                    // Push the Docker image to ECR
                    //docker.withRegistry(ECRURL, ECRCRED)
                    //docker.withRegistery(ECRURL)
                    //{
                        docker.image(IMAGE).push()
                    //}
                }
            }
        }
    }
    
    post
    {
        always
        {
            // make sure that the Docker image is removed
            sh "docker rmi $IMAGE | true"
        }
    }
} 